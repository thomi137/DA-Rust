name: Build Rust project with LAPACK/OpenBLAS

on:
  push:
    branches: [test]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout your code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️⃣ Install Rust toolchain
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      # 3️⃣ Install dependencies (LAPACK, OpenBLAS, Fortran compiler)
      - name: Install system LAPACK/BLAS
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential gfortran \
            libopenblas-dev liblapack-dev pkg-config

      # 4️⃣ Verify available libraries and symbols
      - name: Verify LAPACK/BLAS setup
        run: |
          echo ">>> pkg-config info"
          pkg-config --libs lapack
          pkg-config --libs blas
          echo
          echo ">>> Check if dstev_ symbol exists in OpenBLAS"
          nm -D /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblas.so | grep dstev_ || echo "symbol not found"

      # 5️⃣ Configure linker and library path (no source pollution)
      - name: Configure environment for correct linking
        run: |
          # Gather link flags automatically from pkg-config
          LAPACK_FLAGS="$(pkg-config --libs lapack) $(pkg-config --libs blas) -lgfortran"
          echo "RUSTFLAGS=-C linker=cc -C link-args='${LAPACK_FLAGS}" >> $GITHUB_ENV

          # Ensure the runtime linker finds OpenBLAS/LAPACK at execution time
          echo "LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/openblas-pthread:$LD_LIBRARY_PATH" >> $GITHUB_ENV

          echo "Configured:"
          echo "RUSTFLAGS=$RUSTFLAGS"
          echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH"

      # 6️⃣ Build your project
      - name: Build (verbose)
        env:
          RUSTFLAGS: "-C link-args=-lopenblas -llapack -lblas -lgfortran"
        run: |
          cargo clean
          cargo build -vv

      # 7️⃣ Optionally run tests
      - name: Run tests
        run: cargo test -- --nocapture
